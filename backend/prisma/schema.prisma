// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Define your database schema
model Student {
  userId           String          @id @default(cuid())
  email            String          @unique
  username         String          @unique
  password         String
  lastSignedIn     DateTime?
  dateCreated      DateTime        @default(now())
  dateUpdated      DateTime        @default(now()) @updatedAt
  profile          StudentProfile?
  projectsAsMember Project[]       @relation("TeamMember")
  projectsAsLeader Project[]       @relation("Leader")
}

model Teacher {
  userId       String          @id @default(cuid())
  email        String          @unique
  username     String          @unique
  password     String
  lastSignedIn DateTime?
  dateCreated  DateTime        @default(now())
  dateUpdated  DateTime        @default(now()) @updatedAt
  profile      TeacherProfile?
  projects     Project[]
}

model StudentProfile {
  id             String    @id @default(cuid())
  firstName      String
  lastName       String
  semester       Int?
  branch         String?
  graduationDate DateTime?
  CRN            Int?
  URN            String?
  studentId      String    @unique
  student        Student   @relation(fields: [studentId], references: [userId], onDelete: Cascade)
  dateCreated    DateTime  @default(now())
  dateUpdated    DateTime  @default(now()) @updatedAt
}

model TeacherProfile {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  teacherId   String   @unique
  teacher     Teacher  @relation(fields: [teacherId], references: [userId], onDelete: Cascade)
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt
}

model Project {
  id               String      @id @default(cuid())
  title            String
  description      String
  problemsSolved   String?
  teamLeader       Student     @relation("Leader", fields: [teamLeaderId], references: [userId])
  teamLeaderId     String
  teamMembers      Student[]   @relation("TeamMember")
  mentors          Teacher[]
  problemStatement String?
  githubLink       String?
  technologiesUsed String[]
  projectType      ProjectType @default(Software)
  dateCreated      DateTime    @default(now())
  dateUpdated      DateTime    @default(now()) @updatedAt
}

enum ProjectType {
  Software
  Hardware
}
