// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Define your database schema
model Student {
  userId        String          @id @default(cuid())
  email         String          @unique
  username      String          @unique
  password      String
  lastSignedIn  DateTime?
  dateCreated   DateTime        @default(now())
  dateUpdated   DateTime        @default(now()) @updatedAt
  profile       StudentProfile? @relation(fields: [profileId], references: [id])
  profileId     String?
  tokens        StudentToken[]
}

model Teacher {
  userId        String          @id @default(cuid())
  email         String          @unique
  username      String          @unique
  password      String
  lastSignedIn  DateTime?
  dateCreated   DateTime        @default(now())
  dateUpdated   DateTime        @default(now()) @updatedAt
  profile       TeacherProfile? @relation(fields: [profileId], references: [id])
  profileId     String?
  tokens        TeacherToken[]
}

model StudentProfile {
  id          String       @id @default(cuid())
  firstName   String
  lastName    String
  students    Student[] // Rename 'Student' to 'students' to match pluralization convention
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt
}

model TeacherProfile {
  id          String       @id @default(cuid())
  firstName   String
  lastName    String
  teachers    Teacher[] // Rename 'Teacher' to 'teachers' to match pluralization convention
  dateCreated DateTime  @default(now())
  dateUpdated DateTime  @default(now()) @updatedAt
}

model StudentToken {
  id       String   @id @default(cuid())
  userId   String
  token    String
  student  Student? @relation(fields: [userId], references: [userId], onDelete: Cascade) // Fix relation to use 'userId'
}

model TeacherToken {
  id       String   @id @default(cuid())
  userId   String
  token    String
  teacher  Teacher? @relation(fields: [userId], references: [userId], onDelete: Cascade) // Fix relation to use 'userId'
}
